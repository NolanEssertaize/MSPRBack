services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: plant_care_postgres
    environment:
      POSTGRES_DB: plant_care_db
      POSTGRES_USER: plant_user
      POSTGRES_PASSWORD: plant_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - plant_care_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U plant_user -d plant_care_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Application FastAPI
  api:
    build:
      context: .
      dockerfile: dockerfile.observability
    container_name: plant_care_api
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./photos:/app/photos
    environment:
      - DATABASE_URL=postgresql://plant_user:plant_password@postgres:5432/plant_care_db
      - SECRET_KEY=your-production-secret-key-change-this
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ENCRYPTION_KEY=your-secure-encryption-key-change-this-in-production
      - ENCRYPTION_ENABLED=true
      # Variables pour l'observabilité
      - ENABLE_OBSERVABILITY=true
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://alloy:4317
      - OTEL_SERVICE_NAME=plant-care-api
      - OTEL_RESOURCE_ATTRIBUTES=service.name=plant-care-api,service.version=1.0.0
      - ENVIRONMENT=development
    networks:
      - plant_care_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "observability=enabled"

  # Loki (logs) - doit démarrer AVANT Alloy
  loki:
    image: grafana/loki:2.9.2
    container_name: plant_care_loki
    ports:
      - "3100:3100"  # Port Loki
    volumes:
      - ./observability/loki:/etc/loki
      - loki_data:/loki
    command: -config.file=/etc/loki/loki.yml
    networks:
      - plant_care_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Tempo (traces)
  tempo:
    image: grafana/tempo:2.3.1
    container_name: plant_care_tempo
    ports:
      - "3200:3200"   # Tempo HTTP
      - "9095:9095"   # Tempo gRPC
    volumes:
      - ./observability/tempo:/etc/tempo
      - tempo_data:/tmp/tempo
    command:
      - "-config.file=/etc/tempo/tempo.yml"
    networks:
      - plant_care_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Mimir (métriques)
  mimir:
    image: grafana/mimir:2.10.4
    container_name: plant_care_mimir
    ports:
      - "9009:9009"
    volumes:
      - ./observability/mimir:/etc/mimir
      - mimir_data:/data
    command:
      - "-config.file=/etc/mimir/mimir.yml"
    networks:
      - plant_care_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9009/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Grafana Alloy (collecteur de télémétrie) - APRÈS Loki, Tempo, Mimir
  alloy:
    image: grafana/alloy:latest
    container_name: plant_care_alloy
    ports:
      - "12345:12345"  # Interface web d'Alloy
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    volumes:
      - ./observability/alloy:/etc/alloy:ro
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - run
      - /etc/alloy/config.alloy
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/tmp/alloy
    networks:
      - plant_care_network
    depends_on:
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
      mimir:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:12345/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Grafana (visualisation)
  grafana:
    image: grafana/grafana:10.2.2
    container_name: plant_care_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
      - GF_LOG_LEVEL=info
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    networks:
      - plant_care_network
    depends_on:
      - loki
      - tempo
      - mimir
      - alloy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  loki_data:
  tempo_data:
  mimir_data:
  grafana_data:

networks:
  plant_care_network:
    driver: bridge