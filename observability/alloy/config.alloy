// observability/alloy/config.alloy - Configuration simplifiée pour Prometheus
// Configuration Grafana Alloy pour Plant Care Application - Version Prometheus

// =====================================================
// DÉCOUVERTE DES SERVICES
// =====================================================

// Découverte des conteneurs Docker
discovery.docker "containers" {
  host = "unix:///var/run/docker.sock"

  filter {
    name   = "label"
    values = ["observability=enabled"]
  }
}

// =====================================================
// COLLECTE DES LOGS (conservée)
// =====================================================

// Logs des conteneurs Docker
loki.source.docker "docker_logs" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.docker.containers.targets

  forward_to = [loki.process.plant_care.receiver]

  relabel_rules = loki.relabel.docker_logs.rules
}

// Relabeling pour les logs Docker
loki.relabel "docker_logs" {
  forward_to = []

  rule {
    source_labels = ["__meta_docker_container_name"]
    target_label  = "container"
  }

  rule {
    source_labels = ["__meta_docker_container_image"]
    target_label  = "image"
  }

  rule {
    source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
    target_label  = "service"
  }
}

// Logs système
loki.source.file "system_logs" {
  targets = [
    {__path__ = "/var/log/syslog", job = "syslog"},
    {__path__ = "/var/log/auth.log", job = "auth"},
  ]

  forward_to = [loki.process.plant_care.receiver]
}

// Traitement des logs
loki.process "plant_care" {
  forward_to = [loki.write.default.receiver]

  stage.json {
    expressions = {
      level     = "level",
      timestamp = "timestamp",
      message   = "message",
      service   = "service",
    }
  }

  stage.labels {
    values = {
      level   = "",
      service = "",
    }
  }

  stage.output {
    source = "message"
  }
}

// Écriture vers Loki
loki.write "default" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}

// =====================================================
// COLLECTE DES MÉTRIQUES - VERSION PROMETHEUS
// =====================================================

// Les métriques seront collectées directement par Prometheus
// Alloy ne fait que passer les métriques si nécessaire

// Métriques des conteneurs Docker (pour remote_write vers Prometheus si besoin)
prometheus.scrape "docker_containers" {
  targets    = discovery.docker.containers.targets
  forward_to = [prometheus.relabel.docker_metrics.receiver]

  scrape_interval = "15s"
  metrics_path    = "/metrics"
}

// Relabeling pour les métriques Docker
prometheus.relabel "docker_metrics" {
  forward_to = [prometheus.remote_write.prometheus.receiver]

  rule {
    source_labels = ["__meta_docker_container_name"]
    target_label  = "container"
  }

  rule {
    source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
    target_label  = "service"
  }
}

// Remote write vers Prometheus (optionnel - Prometheus peut scraper directement)
prometheus.remote_write "prometheus" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"
  }
}

// =====================================================
// COLLECTE DES TRACES (conservée)
// =====================================================

// Réception des traces OTLP
otelcol.receiver.otlp "default" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }

  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    traces  = [otelcol.processor.batch.default.input]
    logs    = [otelcol.processor.batch.otel_logs.input]
  }
}

// Traitement en lot des traces
otelcol.processor.batch "default" {
  output {
    traces = [otelcol.exporter.otlp.tempo.input]
  }
}

// Traitement en lot des logs OTLP
otelcol.processor.batch "otel_logs" {
  output {
    logs = [otelcol.exporter.loki.default.input]
  }
}

// Export des logs OTLP vers Loki
otelcol.exporter.loki "default" {
  forward_to = [loki.write.default.receiver]
}

// Export vers Tempo
otelcol.exporter.otlp "tempo" {
  client {
    endpoint = "http://tempo:9095"
    tls {
      insecure = true
    }
  }
}

// =====================================================
// MÉTRIQUES SYSTÈME (Node Exporter géré séparément)
// =====================================================

// Node Exporter sera scrapé directement par Prometheus
// Pas besoin de configuration ici

// =====================================================
// LOGGING DE DEBUG
// =====================================================

// Logs internes d'Alloy
logging {
  level  = "info"
  format = "logfmt"
}

// Exposition des métriques internes d'Alloy
prometheus.exporter.self "alloy" {}

prometheus.scrape "alloy_self" {
  targets    = prometheus.exporter.self.alloy.targets
  forward_to = [prometheus.relabel.alloy_metrics.receiver]

  scrape_interval = "15s"
}

// Relabeling pour Alloy
prometheus.relabel "alloy_metrics" {
  forward_to = [prometheus.remote_write.prometheus.receiver]

  rule {
    target_label = "service"
    replacement  = "alloy"
  }
}